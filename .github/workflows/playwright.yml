name: Regression Tests
on:
  workflow_dispatch:
    inputs:
      browser:
        description: "Select browser"
        required: true
        default: "chromium"
        type: choice
        options:
          - "chromium"
          - "webkit"
          - "firefox"

jobs:
#  list_tests:
#    runs-on: ubuntu-latest
#    outputs:
#      test_files: ${{ steps.get_tests.outputs.test_files }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Get list of test files
#        id: get_tests
#        run: |
#          TEST_FILES=$(find tests/ -type f -name 'test_*.py')
#          echo "Found test files:"
#          echo "$TEST_FILES"
#          TEST_FILES_JSON=$(printf '%s\n' $TEST_FILES | jq -R . | jq -s .)
#          echo "test_files=$TEST_FILES_JSON" >> $GITHUB_OUTPUT



  build_and_test:
    #needs: list_tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #test_file: ${{ fromJson(needs.list_tests.outputs.test_files) }}
        test_file:
          - tests/tests_default_flow/test_default_sign_up_eps_download_welcome_modal.py
          - tests/tests_default_flow/test_another_test_file.py
          - tests/tests_default_flow/test_default_sign_up_png_download_welcome_modal.py
          - tests/tests_default_flow/test_default_sign_up_svg_download_welcome_modal.py
      max-parallel: 15
    permissions:
      contents: write
      pull-requests: write
    env:
      STAGE_ADMIN_LINK: ${{ secrets.STAGE_ADMIN_LINK }}
      STAGE_ADMIN_EMAIL: ${{ secrets.STAGE_ADMIN_EMAIL }}
      STAGE_ADMIN_PASSWORD: ${{ secrets.STAGE_ADMIN_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Install Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker-compose

      - name: Run tests
        run: |
          docker-compose run \
            -e TEST_PATH=${{ matrix.test_file }} \
            -e BROWSER=${{ github.event.inputs.browser }} \
            ui-tests || true

      - name: Upload Allure Results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results-${{ matrix.test_file }}
          path: allure-results

  generate_reports:
    runs-on: ubuntu-latest
    needs: build_and_test
    env:
        BROWSER: ${{ github.event.inputs.browser }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: ./gh-pages/${{ github.event.inputs.browser }}
          clean: 'true'

      - name: Collect Allure Results
        run: |
          mkdir -p merged-results
          cp -R build_and_test/**/allure-results/* merged-results/

      - name: Download Allure Results
        uses: actions/download-artifact@v3
        with:
          name: 'allure-results-*'
          path: allure-results

      - name: Merge Allure Results
        run: |
          mkdir -p merged-results
          cp -R allure-results/** merged-results/

      - name: Allure Report Action
        uses: mgrybyk-org/allure-report-branch-action@v1
        if: always()
        continue-on-error: true
        id: allure
        with:
          report_id: ${{ github.event.inputs.browser }}
          gh_pages: ./gh-pages/${{ github.event.inputs.browser }}
          list_dirs: ${{ github.ref == 'refs/heads/main' }}
          branch_cleanup_enabled: ${{ github.ref == 'refs/heads/main' }}
          report_dir: merged-results


      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }}
          branch: gh-pages
          folder: ./gh-pages/${{ github.event.inputs.browser }}
          clean: true

      - name: Comment PR with Allure Report link
        if: ${{ always() && github.event_name == 'pull_request' && steps.allure.outputs.report_url }}
        continue-on-error: true
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ${{ steps.allure.outputs.test_result_icon }} [Allure Report](${{ steps.allure.outputs.report_url }}/${{ github.event.inputs.browser  }}/) | ${{ steps.allure.outputs.test_result_passed }}/${{ steps.allure.outputs.test_result_failed }}/${{ steps.allure.outputs.test_result_total }} | [History](${{ steps.allure.outputs.report_history_url }})
          comment_tag: allure_allure
          mode: recreate


      # - name: Send notification to Slack
          #   env:
          #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          #   run: |
          #       if [ "${{ github.event.inputs.browser }}" = "chrome" ]; then
          #         REPORT_URL="https://chrome-pi.vercel.app"
          #       elif [ "${{ github.event.inputs.browser }}" = "firefox" ]; then
          #         REPORT_URL="https://firefox-kohl.vercel.app"
          #       elif [ "${{ github.event.inputs.browser }}" = "webkit" ]; then
          #         REPORT_URL="https://webkit-two.vercel.app"
          #       fi

      #       curl -X POST -H 'Content-type: application/json' --data '{
      #       "text": "Tests are finished",
      #       "blocks": [
      #         {
      #           "type": "section",
      #           "text": {
      #             "type": "mrkdwn",
      #             "text": ":white_check_mark: @here Tests are finished for *'"${{ github.event.inputs.browser }}"'*. <'"${REPORT_URL}"'|Open link>"
      #           }
      #         }
      #       ]
      #       }' $SLACK_WEBHOOK_URL
