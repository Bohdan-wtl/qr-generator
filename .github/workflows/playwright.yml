name: Run Tests
on:
  workflow_dispatch:
    inputs:
      browser:
        description: 'Select browser'
        required: true
        default: 'chromium'
        type: choice
        options:
          - 'chromium'
          - 'webkit'
          - 'firefox'
      languages:
        description: 'List of languages (comma-separated)'
        required: true
        type: string
        default: '', 

jobs:

  list_tests:
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.get_tests.outputs.test_files }}
    steps:
      - uses: actions/checkout@v4
      - name: Get list of test files
        id: get_tests
        run: |
          echo "test_files=$(find tests/ -type f -name 'test_*.py' | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

  run_tests:
    needs: list_tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        test_file: ${{ fromJson(needs.list_tests.outputs.test_files) }}
    permissions:
      contents: write
      pull-requests: write
    env:
      STAGE_ADMIN_LINK: ${{ secrets.STAGE_ADMIN_LINK }}
      STAGE_ADMIN_EMAIL: ${{ secrets.STAGE_ADMIN_EMAIL }}
      STAGE_ADMIN_PASSWORD: ${{ secrets.STAGE_ADMIN_PASSWORD }}
      BROWSER: ${{ github.event.inputs.browser }}
      TEST_PATH: ${{ matrix.test_file }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Cache Docker Compose
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/docker-compose
          key: ${{ runner.os }}-docker-compose

      - name: Install Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker-compose

      - name: Run smoke tests
        id: smoke_test
        run: |
          docker-compose run smoke-tests || echo $? > test_exit_code.txt
        continue-on-error: true
        env:
          LANGUAGES: ''

      - name: Sanitize artifact name for smoke tests
        id: sanitize_smoke
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.test_file }}" | tr '/' '-')
          echo "SANITIZED_NAME=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Upload Allure Results for smoke tests
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-smoke-${{ steps.sanitize_smoke.outputs.SANITIZED_NAME }}
          path: allure-results

      - name: Check smoke test results
        id: check_results
        if: always()
        run: |
          EXIT_CODE=$(cat test_exit_code.txt || echo "0")
          echo "Exit code from smoke tests: $EXIT_CODE"
          if [ "$EXIT_CODE" = "5" ] || [ "$EXIT_CODE" = "0" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Run regression tests
        id: regression_test
        if: steps.check_results.outputs.success == 'true'
        run: |
          docker-compose run regression-tests
        continue-on-error: true
        env:
          LANGUAGES: ${{ github.event.inputs.languages }}

      - name: Sanitize artifact name for regression tests
        id: sanitize_regression
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.test_file }}" | tr '/' '-')
          echo "SANITIZED_NAME=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Upload Allure Results for regression tests
        uses: actions/upload-artifact@v4
        if: steps.check_results.outputs.success == 'true'
        with:
          name: allure-results-regression-${{ steps.sanitize_regression.outputs.SANITIZED_NAME }}
          path: allure-results

  generate_reports:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: run_tests
    if: always()
    env:
      BROWSER: ${{ github.event.inputs.browser }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: ./gh-pages/${{ github.event.inputs.browser }}
          clean: true
          lfs: true

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge Allure Results
        run: |
          mkdir -p merged-results
          find artifacts/ -type f -exec cp {} merged-results/ \;


      - name: Allure Report Action
        uses: mgrybyk-org/allure-report-branch-action@v1
        if: always()
        continue-on-error: true
        id: allure
        with:
          report_id: ${{ github.event.inputs.browser }}
          gh_pages: ./gh-pages/${{ github.event.inputs.browser }}
          list_dirs: ${{ github.ref == 'refs/heads/main' }}
          branch_cleanup_enabled: ${{ github.ref == 'refs/heads/main' }}
          report_dir: merged-results
          max_reports: 3

      - name: Debug Artifact Download
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of current directory:"
          ls -la

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }}
          branch: gh-pages
          folder: gh-pages/${{ github.event.inputs.browser }}
          clean: true

      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          REPORT_URL="https://increast-team.github.io/QR-Code-QA/allure-action/main/${{ github.event.inputs.browser }}/"
          SUMMARY_FILE=$(find gh-pages/${{ github.event.inputs.browser }}/allure-action/main/${{ github.event.inputs.browser }} -name summary.json | head -n 1)
          if [ -z "$SUMMARY_FILE" ]; then
            echo "summary.json file not found"
            TOTAL_TESTS="N/A"
            PASSED_TESTS="N/A"
            FAILED_TESTS="N/A"
          else
            TOTAL_TESTS=$(jq '.statistic.total' "$SUMMARY_FILE")
            PASSED_TESTS=$(jq '.statistic.passed' "$SUMMARY_FILE")
            FAILED_TESTS=$(jq '.statistic.failed' "$SUMMARY_FILE")
          fi
          curl -X POST -H 'Content-type: application/json' --data '{
          "text": "Tests are finished",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": ":clipboard: Test Results for ${{ github.event.inputs.browser }}\n*Total:* '"${TOTAL_TESTS}"'\n*Passed:* '"${PASSED_TESTS}"'\n*Failed:* '"${FAILED_TESTS}"'\n<'"${REPORT_URL}"'|:bar_chart: Open Allure Report>"
              }
            }
          ]
          }' $SLACK_WEBHOOK_URL
