{"uid":"58b8b6317f82631e","name":"Admin create payment link - chromium","fullName":"tests.tests_generation_unic_admin_links.test_admin_link_generation.TestAdminLinkGeneration#test_admin_create_uniq_payment_link","historyId":"b9c68acdadda12736ace6c212c0285a8","time":{"start":1734517387966,"stop":1734517387966,"duration":0},"status":"broken","statusMessage":"playwright._impl._errors.TargetClosedError: Error: Invalid username or password","statusTrace":"request = <SubRequest 'browser' for <Function test_admin_create_uniq_payment_link[default_pricing_button-ar]>>\n\n    @pytest.fixture(scope=\"session\")\n    @allure.title(f\"Set up browser: {os.getenv('BROWSER')}\")\n    def browser(request):\n        desired_cap = {\n            'os': 'osx',\n            'os_version': 'catalina',\n            'browser': os.getenv('BROWSER', 'chrome'),  # allowed browsers are `chrome`, `edge`, `playwright-chromium`, `playwright-firefox` and `playwright-webkit`\n            'browser_version': 'latest', # this capability is valid only for branded `chrome` and `edge` browsers and you can specify any browser version like `latest`, `latest-beta`, `latest-1` and so on.\n            'browserstack.username': os.getenv('BROWSERSTACK_USERNAME'),\n            'browserstack.accessKey': os.getenv('BROWSERSTACK_ACCESS_KEY'),\n            'browserstack.geoLocation': 'FR',\n            'project': 'My First Project',\n            'build': 'playwright-python-1',\n            'name': 'My First Test',\n            'buildTag': 'reg',\n            'resolution': '1280x1024',\n            'browserstack.local': 'true',\n            'browserstack.localIdentifier': 'local_connection_name',\n            'browserstack.playwrightVersion': '1.latest',\n            'client.playwrightVersion': '1.latest',\n            'browserstack.debug': True,\n            'browserstack.console': \"info\",\n            'browserstack.networkLogs': True,\n            'browserstack.interactiveDebugging': True\n        }\n        with sync_playwright() as p:\n            browser_type = desired_cap['browser']\n            if browser_type in ['chrome', 'edge']:\n                capabilities = {\n                    **desired_cap,\n                    'browser': 'chromium',\n                    'channel': browser_type\n                }\n            if desired_cap.get('browserstack.username') and desired_cap.get('browserstack.accessKey'):\n                ws_endpoint = f'wss://cdp.browserstack.com/playwright?caps=' + urllib.parse.quote(json.dumps(desired_cap))\n>               browser = p.chromium.connect(ws_endpoint)\n\nconftest.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.12/dist-packages/playwright/sync_api/_generated.py:14873: in connect\n    self._sync(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BrowserType name=chromium executable_path=/ms-playwright/chromium-1140/chrome-linux/chrome>\nwsEndpoint = 'wss://cdp.browserstack.com/playwright?caps=%7B%22os%22%3A%20%22osx%22%2C%20%22os_version%22%3A%20%22catalina%22%2C%20...A%20%22info%22%2C%20%22browserstack.networkLogs%22%3A%20true%2C%20%22browserstack.interactiveDebugging%22%3A%20true%7D'\ntimeout = 30000, slowMo = 0, headers = {'x-playwright-browser': 'chromium'}\nexposeNetwork = None\n\n    async def connect(\n        self,\n        wsEndpoint: str,\n        timeout: float = None,\n        slowMo: float = None,\n        headers: Dict[str, str] = None,\n        exposeNetwork: str = None,\n    ) -> Browser:\n        if timeout is None:\n            timeout = 30000\n        if slowMo is None:\n            slowMo = 0\n    \n        headers = {**(headers if headers else {}), \"x-playwright-browser\": self.name}\n        local_utils = self._connection.local_utils\n        pipe_channel = (\n            await local_utils._channel.send_return_as_dict(\n                \"connect\",\n                {\n                    \"wsEndpoint\": wsEndpoint,\n                    \"headers\": headers,\n                    \"slowMo\": slowMo,\n                    \"timeout\": timeout,\n                    \"exposeNetwork\": exposeNetwork,\n                },\n            )\n        )[\"pipe\"]\n        transport = JsonPipeTransport(self._connection._loop, pipe_channel)\n    \n        connection = Connection(\n            self._connection._dispatcher_fiber,\n            self._connection._object_factory,\n            transport,\n            self._connection._loop,\n            local_utils=self._connection.local_utils,\n        )\n        connection.mark_as_remote()\n    \n        browser = None\n    \n        def handle_transport_close(reason: Optional[str]) -> None:\n            if browser:\n                for context in browser.contexts:\n                    for page in context.pages:\n                        page._on_close()\n                    context._on_close()\n                browser._on_close()\n            connection.cleanup(reason)\n            # TODO: Backport https://github.com/microsoft/playwright/commit/d8d5289e8692c9b1265d23ee66988d1ac5122f33\n            # Give a chance to any API call promises to reject upon page/context closure.\n            # This happens naturally when we receive page.onClose and browser.onClose from the server\n            # in separate tasks. However, upon pipe closure we used to dispatch them all synchronously\n            # here and promises did not have a chance to reject.\n            # The order of rejects vs closure is a part of the API contract and our test runner\n            # relies on it to attribute rejections to the right test.\n    \n        transport.once(\"close\", handle_transport_close)\n    \n        connection._is_sync = self._connection._is_sync\n        connection._loop.create_task(connection.run())\n        playwright_future = connection.playwright_future\n    \n        timeout_future = throw_on_timeout(timeout, Error(\"Connection timed out\"))\n        done, pending = await asyncio.wait(\n            {transport.on_error_future, playwright_future, timeout_future},\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not playwright_future.done():\n            playwright_future.cancel()\n        if not timeout_future.done():\n            timeout_future.cancel()\n>       playwright: \"Playwright\" = next(iter(done)).result()\nE       playwright._impl._errors.TargetClosedError: Error: Invalid username or password\n\n/usr/local/lib/python3.12/dist-packages/playwright/_impl/_browser_type.py:257: TargetClosedError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1734517387967,"stop":1734517388033,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1734517388033,"stop":1734517388033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Set up browser: chromium","time":{"start":1734517388033,"stop":1734517390240,"duration":2207},"status":"broken","statusMessage":"playwright._impl._errors.TargetClosedError: Error: Invalid username or password\n","statusTrace":"  File \"/usr/local/lib/python3.12/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/app/workspace/conftest.py\", line 55, in browser\n    browser = p.chromium.connect(ws_endpoint)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/dist-packages/playwright/sync_api/_generated.py\", line 14873, in connect\n    self._sync(\n  File \"/usr/local/lib/python3.12/dist-packages/playwright/_impl/_sync_base.py\", line 115, in _sync\n    return task.result()\n           ^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/dist-packages/playwright/_impl/_browser_type.py\", line 257, in connect\n    playwright: \"Playwright\" = next(iter(done)).result()\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1734517388033,"stop":1734517388033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1734517388033,"stop":1734517388033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1734517388033,"stop":1734517388033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Admin link generation - chromium"},{"name":"tag","value":"regression"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.tests_generation_unic_admin_links"},{"name":"suite","value":"test_admin_link_generation"},{"name":"subSuite","value":"TestAdminLinkGeneration"},{"name":"host","value":"9df694bee6c2"},{"name":"thread","value":"20-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.tests_generation_unic_admin_links.test_admin_link_generation"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"discount_button_locator","value":"'default_pricing_button'"},{"name":"language","value":"'ar'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["regression","smoke"]},"source":"58b8b6317f82631e.json","parameterValues":["'default_pricing_button'","'ar'"]}